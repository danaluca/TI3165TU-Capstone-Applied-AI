from VAEClass import VAE_Decoder, preprocess
import matplotlib.pyplot as plt
import tensorflow as tf
import numpy as np


# Load data
#u_train, u_val, u_test = preprocess()
z = tf.reshape(tf.convert_to_tensor(np.load('vae_latent_space.npy')), shape=(3000, 1, 1, 30))
model = VAE_Decoder(decoder_file='vae_decoder_ph_v1.2.h5')

u_pred = model.forward(z)

#print(z.shape)
print(u_pred.shape)

np.save('reconstructed_flows.npy', u_pred)

# Load cluster indices
cluster_indices = {0: [53, 54, 55, 56, 57, 58, 59, 60, 61, 70, 71, 72, 73, 74, 75, 76, 77, 78, 138, 139, 140, 141, 142, 173, 174, 175, 176, 177, 178,
					   179, 180, 181, 182, 183, 184, 185, 204, 214, 215, 216, 217, 218, 219, 220, 234, 235, 236, 237, 238, 239, 271, 272, 273, 282, 283,
					   284, 285, 286, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 505, 525, 526, 527, 528,
					   529, 530, 542, 543, 571, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 690, 746, 747, 748, 749, 750, 751, 773,
					   782, 783, 784, 785, 786, 787, 818, 839, 840, 848, 849, 850, 851, 852, 853, 854, 855, 904, 905, 906, 907, 908, 924, 925, 926, 927,
					   928, 929, 930, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 994, 995, 996, 997, 998, 1096, 1097, 1098,
					   1099, 1100, 1101, 1102, 1222, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1302, 1303, 1304,
					   1308, 1309, 1310, 1344, 1372, 1378, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1483, 1484, 1485, 1486, 1487, 1505, 1506,
					   1507, 1508, 1548, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1582, 1583, 1584, 1753, 1754, 1755, 1756, 1757, 1771,
					   1789, 1790, 1791, 1792, 1891, 1892, 1893, 1894, 1944, 1945, 1952, 1981, 2074, 2075, 2076, 2077, 2078, 2079, 2093, 2094, 2103,
					   2104, 2122, 2123, 2191, 2192, 2213, 2214, 2215, 2216, 2217, 2218, 2264, 2266, 2267, 2313, 2314, 2315, 2316, 2317, 2318, 2319,
					   2334, 2335, 2384, 2393, 2394, 2395, 2396, 2397, 2410, 2537, 2538, 2539, 2540, 2541, 2572, 2573, 2622, 2623, 2624, 2625, 2626,
					   2627, 2628, 2629, 2680, 2711, 2818, 2819, 2820, 2821, 2822, 2823, 2824, 2825, 2826, 2878, 2879, 2880, 2889, 2890, 2946, 2947,
					   2948, 2980],
				  3: [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 146, 147, 148, 149, 150, 151, 152, 153, 154, 169, 170, 171,
				  	  172, 190, 191, 192, 193, 248, 249, 250, 251, 252, 253, 254, 255, 323, 324, 325, 326, 347, 348, 349, 350, 351, 352, 419, 420, 421,
				  	  422, 456, 496, 497, 498, 499, 710, 711, 712, 713, 931, 932, 933, 934, 1028, 1589, 1590, 1591, 1592, 1593, 1594, 1616, 1617, 1667,
				  	  1795, 1796, 1797, 1798, 1921, 1922, 2046, 2206, 2457, 2542, 2543, 2544, 2545, 2588, 2589, 2590, 2656, 2727, 2744, 2745, 2746, 2747,
				  	  2811, 2812, 2813, 2814, 2836, 2837, 2838, 2839, 2840, 2841, 2842, 2843],
				  14: [935, 936, 937, 938, 939, 940, 1206, 1207, 1208, 1209, 1210, 1211, 1425, 1426, 1427, 1428, 1429, 1692, 1693, 1694, 1695, 1696, 1697, 1698,
				  	   1699, 2255, 2256, 2257, 2258, 2259, 2696, 2697, 2698, 2699, 2700, 2701, 2702, 2703, 2704, 2705, 2706, 2707, 2833, 2834, 2835, 2949, 2950],
				  20: [127, 128, 245, 246, 247, 383, 384, 385, 386, 387, 481, 482, 483, 484, 485, 724, 725, 726, 901, 902, 903, 922, 1107, 1313, 1314, 1315, 1316,
				  	   1317, 1319, 1320, 1321, 1418, 1419, 1420, 1421, 1525, 1526, 1527, 1652, 1653, 1999, 2000, 2001, 2030, 2031, 2032, 2033, 2668, 2669, 2670, 2671,
				  	   2672, 2673, 2674, 2675, 2735, 2736, 2737, 2748, 2749, 2750, 2751],
				  27: [1118, 1119, 1120, 1121, 1122, 1123, 1124, 1805, 1806, 1807, 1919, 1920, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044,
				  	   2045, 2260, 2261, 2262, 2263, 2385, 2386, 2387, 2388, 2389, 2390, 2391, 2392]}



fig, axes = plt.subplots(5, 10, figsize=(18, 10))
x, y = np.meshgrid(np.arange(0, 12, 1), np.arange(0, 12, 1))

for i, (cluster, cl_indices) in enumerate(cluster_indices.items()):
	sampled_indices = np.random.choice(cl_indices, size=10)

	for j, idx in enumerate(sampled_indices):
		#Y = tf.reduce_sum(tf.stack([u_train[idx][:, :, 0], tf.square(u_train[idx][:, :, -1])], axis=-1), axis=-1) 
		#axes[i, j].imshow(Y, interpolation='bicubic')

		axes[i, j].quiver(x, y, u_pred[idx, ::2, ::2, 0], u_pred[idx, ::2, ::2, 1], scale=10)
		axes[i, j].set_xticks([])
		axes[i, j].set_yticks([])

	axes[i, 0].set_title(f"Cluster {cluster}")

plt.show()